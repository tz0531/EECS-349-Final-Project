{"name":"Hackjack","tagline":"Final Project for EECS 349 Spring 2015 with Professor Doug Downey, by Joonyong Rhee, Alexander Wenzel, and Taylor Zheng","body":"## Introduction\r\nBlackjack is a popular casino game that is played all over the world, and many have come up with strategies to try to beat the dealer, such as card counting. Such exploits have been highlighted in popular culture through the movie 21, which was based off of the book Bringing Down the House, by Ben Mezrich. The game itself is highly based on probability and seems simple, but effective strategies for beating the dealer are not readily apparent without thorough probabilistic analysis. Because of this, many inexperienced players will make moves based on intuition or gut feeling without taking into account the probabilities behind their decisions. As such, the game is a good choice for applying machine learning algorithms to see whether a computer can devise an effective strategy for playing given enough trial games, so that it can beat the dealer a significant percentage of the time.  \r\n\r\n\r\n![Blackjack Game](http://www.pix123.com/freebetcodes/NewsImages/118186_free-blackjack.jpg)  \r\n**Figure 1: Example of a simulated game of blackjack**  \r\n\r\nOur task is to create a machine that can learn to play the card game Blackjack strategically based upon information learned from previous games it has played through using reinforcement learning techniques. In order to do so, it is necessary to build a Blackjack game implementation that gives feedback and rewards to the machine, which learns the rules of Blackjack as well as advanced gameplay strategies in the process. Our task demonstrates the viability of teaching machines to play deeply intuitive, probability-based games such as Blackjack. It also shows how machine learning techniques in general can have real-world impact, since Blackjack is one of the most popular casino games in the world and generates significant revenue for casinos worldwide.\r\n\r\n## Design\r\nBefore we could implement any machine learning techniques to train a computer to play blackjack, we needed to create an interface that would allow us to simulate a game of blackjack. This involved writing card, deck, player, and dealer classes in Python, allowing a computerized dealer to deal cards to a simulated player that would be taught the game of blackjack through reinforcement learning techniques. We chose to implement a simplified version of the game, with one dealer and one player, no bets or monetary sums, and no splitting. This allowed us to focus purely on the playing strategy involved in the game, since splitting is essentially like creating another player, while the monetary sums involved are important only in a competitive context.  \r\n\r\nIn regards to the details of gameplay, the deck of 52 cards is shuffled before each round, and Aces are valued as 11's automatically, unless it would cause the total value of the hand to go over 21, in which case Aces are revalued as 1's as necessary.  \r\n\r\nDetail the algorithm and how the game runs, Q-values and epsilon-greedy policy\r\n\r\n## Results and Analysis\r\nAdd in graphs and comparison of our algorithm's strategy vs random and dealer's strategies\r\n\r\n## Conclusion\r\nSum up performance of algorithm and potential future work\r\n\r\n### Contact the Authors\r\nJoonyong Rhee  \r\nJoonyongRhee2016@u.northwestern.edu  \r\n\r\nAlexander Wenzel   \r\nAlexanderWenzel2017@u.northwestern.edu  \r\n\r\nTaylor Zheng   \r\nTaylorZheng2015@u.northwestern.edu  \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}